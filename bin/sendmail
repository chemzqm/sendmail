#!/usr/bin/env node

var program = require('commander'),
    exec = require('child_process').exec,
    clog = require('clog'),
    tty = require('tty'),
    fs = require('fs'),
    path = require('path'),
    sendmail = require('../');

program
  .version('1.0.1')
  .usage('[options] [number|filename]')
  .description('edit a new email and send if no arguments except profile exist')
  .option('-l --list', 'show all mails with filename number subject')
  .option('-e --edit <number|filename>', 'edit previous mail by number or filename and send')
  .option('-q --quiet', 'send email without using vim to edit')
  .option('-d --delete <number|filename>', 'remove email, could be number separated by comma like: 0,1,2')
  .option('-c --cat <number>', 'show email content, could be number separated by comma like: 0,1,2')
  .option('-g --grep <text>', 'grep text in all emails')
  .option('-p --profile <name>', 'use profile when sending email specified by name')
  .parse(process.argv);
var DEBUG = false;
var maildir = path.resolve(__dirname, '../mails');
function getEmails(cb){
  var child = exec('grep -r "^subject" .|sort -r',{
      cwd: maildir
    },
    function(err, stdout, stderr){
      if(err) clog.error(err);
      var lines = stdout.split('\n');
      for(var i=0; i < lines.length; i++){
        line = lines[i];
        var match = line.match(/^\.\/(\d+).+?subject:(.*)/);
        if(match){
          cb({
            number : i,
            name : match[1],
            subject : match[2]
          })
        }
      }
    }
  );
}

function cat(filename){
  exec('cat ' + filename ,{
    cwd : maildir
  },function(err, stdout, stderr){
    if(err) clog.error(err);
    console.log(stdout);
  });
}

function grep(text){
  exec('grep -r --color=always ' + text + ' .',{
    cwd : maildir
  },function(err, stdout, stderr){
    if(err) clog.error(err);
    console.log(stdout);
  });
}
var options = {
  profile: program.profile,
  quiet: program.quiet ? true:false
};

var cb = function(err, msg){
  if(err){
    clog.error(err);
  } 
  else {
    clog.info(msg);
  }
};

if(program.list){
  console.log("file     number subject");
  getEmails(function(mail){
    console.log(mail.name + " " + mail.number + "      " + mail.subject);
  });
}
else if(program.delete){
  var ds = program.delete.split(',');
  getEmails(function(mail){
    if(~ds.indexOf(mail.number + '')){
      exec('rm '+ mail.name + '.email',{
        cwd : maildir
      },function(err){
        if(err) clog.error(err);
      });
    }
  });
}
else if(program.cat){
  var cs = program.cat.split(',');
  getEmails(function(mail){
    if(~cs.indexOf(mail.number + '')){
      cat(mail.name + ".email");
    }
  });
}
else if(program.grep){
  var args = program.args,
      second = args.length > 0 ? args[0]:false;
  grep(program.grep);
}
else if(program.edit){//edit file and send
  var file = program.edit;
  if(/\d+/.test(file)){//file number
    getEmails(function(mail){
      if(mail.number == file){
        options.file = path.resolve(__dirname,'../mails', mail.name + '.email');
        sendmail(options, cb);
      }
    });
  }else{
    options.file = path.resolve(process.cwd(), file); 
    sendmail(options, cb);
  }
}
else{
  var file = program.args[0];
  if(file == '-'){
    //sendmail(options, cb);
    stdin();
  }
  else if(file) {
    //read the file content as email content
    fs.readFile(program.args[0], function(err, text){
      if(err) clog.error(err);
      else {
        options.content = text;
        sendmail(options, cb);
      }
    });
  }else sendmail(options, cb);
}
function stdin() {
  var buf = '';
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk){ buf += chunk;
  });
  process.stdin.on('end', function(){
    // process.stdin.removeAllListeners();
    // options.content = buf;
    // sendmail(options, cb);
  }).resume();
}
// vim:syntax=javascript:
